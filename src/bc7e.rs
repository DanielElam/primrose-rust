#[allow(non_camel_case_types,dead_code,non_upper_case_globals,non_snake_case,improper_ctypes)]
pub mod bc7e {
/* automatically generated by rust-bindgen 0.69.4 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _anon0_ {
    pub m_max_mode13_partitions_to_try: u32,
    pub m_max_mode0_partitions_to_try: u32,
    pub m_max_mode2_partitions_to_try: u32,
    pub m_use_mode: [bool; 7usize],
    pub m_unused1: bool,
}
#[test]
fn bindgen_test_layout__anon0_() {
    const UNINIT: ::std::mem::MaybeUninit<_anon0_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_anon0_>(),
        20usize,
        concat!("Size of: ", stringify!(_anon0_))
    );
    assert_eq!(
        ::std::mem::align_of::<_anon0_>(),
        4usize,
        concat!("Alignment of ", stringify!(_anon0_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode13_partitions_to_try) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode13_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode0_partitions_to_try) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode0_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode2_partitions_to_try) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode2_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_use_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused1) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_unused1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _anon1_ {
    pub m_max_mode7_partitions_to_try: u32,
    pub m_mode67_error_weight_mul: [u32; 4usize],
    pub m_use_mode4: bool,
    pub m_use_mode5: bool,
    pub m_use_mode6: bool,
    pub m_use_mode7: bool,
    pub m_use_mode4_rotation: bool,
    pub m_use_mode5_rotation: bool,
    pub m_unused2: bool,
    pub m_unused3: bool,
}
#[test]
fn bindgen_test_layout__anon1_() {
    const UNINIT: ::std::mem::MaybeUninit<_anon1_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_anon1_>(),
        28usize,
        concat!("Size of: ", stringify!(_anon1_))
    );
    assert_eq!(
        ::std::mem::align_of::<_anon1_>(),
        4usize,
        concat!("Alignment of ", stringify!(_anon1_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode7_partitions_to_try) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_max_mode7_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode67_error_weight_mul) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_mode67_error_weight_mul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode5) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode6) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode7) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode4_rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode4_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode5_rotation) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode5_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_unused2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused3) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_unused3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bc7e_compress_block_params {
    pub m_max_partitions_mode: [u32; 8usize],
    pub m_weights: [u32; 4usize],
    pub m_uber_level: u32,
    pub m_refinement_passes: u32,
    pub m_mode4_rotation_mask: u32,
    pub m_mode4_index_mask: u32,
    pub m_mode5_rotation_mask: u32,
    pub m_uber1_mask: u32,
    pub m_perceptual: bool,
    pub m_pbit_search: bool,
    pub m_mode6_only: bool,
    pub m_unused0: bool,
    pub m_opaque_settings: _anon0_,
    pub m_alpha_settings: _anon1_,
}
#[test]
fn bindgen_test_layout_bc7e_compress_block_params() {
    const UNINIT: ::std::mem::MaybeUninit<bc7e_compress_block_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bc7e_compress_block_params>(),
        124usize,
        concat!("Size of: ", stringify!(bc7e_compress_block_params))
    );
    assert_eq!(
        ::std::mem::align_of::<bc7e_compress_block_params>(),
        4usize,
        concat!("Alignment of ", stringify!(bc7e_compress_block_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_max_partitions_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_max_partitions_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_weights) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_uber_level) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_uber_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_refinement_passes) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_refinement_passes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode4_rotation_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode4_rotation_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode4_index_mask) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode4_index_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode5_rotation_mask) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode5_rotation_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_uber1_mask) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_uber1_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_perceptual) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_perceptual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_pbit_search) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_pbit_search)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode6_only) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode6_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused0) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_unused0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_opaque_settings) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_opaque_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_alpha_settings) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_alpha_settings)
        )
    );
}
extern "C" {
    pub fn bc7e_compress_block_init();
}
extern "C" {
    pub fn bc7e_compress_block_params_init(p: *mut bc7e_compress_block_params, perceptual: bool);
}
extern "C" {
    pub fn bc7e_compress_block_params_init_basic(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_fast(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_slow(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_slowest(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_ultrafast(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_veryfast(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_block_params_init_veryslow(
        p: *mut bc7e_compress_block_params,
        perceptual: bool,
    );
}
extern "C" {
    pub fn bc7e_compress_blocks(
        num_blocks: u32,
        pBlocks: *mut u64,
        pPixelsRGBA: *const u32,
        pComp_params: *const bc7e_compress_block_params,
    );
}
}