/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
pub type std_less_first_argument_type = u8;
pub type std_less_second_argument_type = u8;
pub type std_less_result_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair {
    pub _address: u8,
}
pub type std_pair_first_type = u8;
pub type std_pair_second_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector {
    pub _address: u8,
}
pub type std_vector__Alty = u8;
pub type std_vector__Alty_traits = u8;
pub type std_vector_value_type = u8;
pub type std_vector_allocator_type = u8;
pub type std_vector_pointer = u8;
pub type std_vector_const_pointer = u8;
pub type std_vector_reference = u8;
pub type std_vector_const_reference = u8;
pub type std_vector_size_type = u8;
pub type std_vector_difference_type = u8;
pub type std_vector__Scary_val = u8;
pub type std_vector_iterator = u8;
pub type std_vector_const_iterator = u8;
pub type std_vector_reverse_iterator = u8;
pub type std_vector_const_reverse_iterator = u8;
pub const std_vector__Reallocation_policy__At_least: std_vector__Reallocation_policy = 0;
pub const std_vector__Reallocation_policy__Exactly: std_vector__Reallocation_policy = 0;
pub type std_vector__Reallocation_policy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr {
    pub _address: u8,
}
pub type std_unique_ptr_pointer = u8;
pub type std_unique_ptr_element_type = u8;
pub type std_unique_ptr_deleter_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map {
    pub _address: u8,
}
pub type std_map__Mybase = u8;
pub type std_map__Nodeptr = u8;
pub type std_map_key_type = u8;
pub type std_map_mapped_type = u8;
pub type std_map_key_compare = u8;
pub type std_map_value_compare = u8;
pub type std_map_value_type = u8;
pub type std_map_allocator_type = u8;
pub type std_map_size_type = u8;
pub type std_map_difference_type = u8;
pub type std_map_pointer = u8;
pub type std_map_const_pointer = u8;
pub type std_map_reference = u8;
pub type std_map_const_reference = u8;
pub type std_map_iterator = u8;
pub type std_map_const_iterator = u8;
pub type std_map_reverse_iterator = u8;
pub type std_map_const_reverse_iterator = u8;
pub type std_map__Alnode = u8;
pub type std_map__Alnode_traits = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multimap {
    pub _address: u8,
}
pub type std_multimap__Mybase = u8;
pub type std_multimap_key_type = u8;
pub type std_multimap_mapped_type = u8;
pub type std_multimap_key_compare = u8;
pub type std_multimap_value_compare = u8;
pub type std_multimap_value_type = u8;
pub type std_multimap_allocator_type = u8;
pub type std_multimap_size_type = u8;
pub type std_multimap_difference_type = u8;
pub type std_multimap_pointer = u8;
pub type std_multimap_const_pointer = u8;
pub type std_multimap_reference = u8;
pub type std_multimap_const_reference = u8;
pub type std_multimap_iterator = u8;
pub type std_multimap_const_iterator = u8;
pub type std_multimap_reverse_iterator = u8;
pub type std_multimap_const_reverse_iterator = u8;
pub type std_multimap__Alnode = u8;
pub type std_multimap__Alnode_traits = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string {
    pub _address: u8,
}
pub type std_basic_string__Alty = u8;
pub type std_basic_string__Alty_traits = u8;
pub type std_basic_string__Scary_val = u8;
pub type std_basic_string_traits_type = u8;
pub type std_basic_string_allocator_type = u8;
pub type std_basic_string_value_type = u8;
pub type std_basic_string_size_type = u8;
pub type std_basic_string_difference_type = u8;
pub type std_basic_string_pointer = u8;
pub type std_basic_string_const_pointer = u8;
pub type std_basic_string_reference = u8;
pub type std_basic_string_const_reference = u8;
pub type std_basic_string_iterator = u8;
pub type std_basic_string_const_iterator = u8;
pub type std_basic_string_reverse_iterator = u8;
pub type std_basic_string_const_reverse_iterator = u8;
pub type std_basic_string__Is_elem_cptr = u8;
pub const std_basic_string__Allocation_policy__At_least: std_basic_string__Allocation_policy = 0;
pub const std_basic_string__Allocation_policy__Exactly: std_basic_string__Allocation_policy = 0;
pub type std_basic_string__Allocation_policy = ::std::os::raw::c_int;
pub const std_basic_string__Construct_strategy__From_char: std_basic_string__Construct_strategy = 0;
pub const std_basic_string__Construct_strategy__From_ptr: std_basic_string__Construct_strategy = 0;
pub const std_basic_string__Construct_strategy__From_string: std_basic_string__Construct_strategy =
    0;
pub type std_basic_string__Construct_strategy = ::std::os::raw::c_uchar;
pub type ozz_byte = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_span<_Ty> {
    pub data_: *mut _Ty,
    pub size_: usize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
}
pub type ozz_span_element_type<_Ty> = _Ty;
pub type ozz_span_value_type<_Ty> = _Ty;
pub type ozz_span_index_type = usize;
pub type ozz_span_difference_type = isize;
pub type ozz_span_pointer<_Ty> = *mut _Ty;
pub type ozz_span_const_pointer<_Ty> = *const _Ty;
pub type ozz_span_reference<_Ty> = *mut _Ty;
pub type ozz_span_const_reference<_Ty> = *const _Ty;
pub type ozz_span_iterator<_Ty> = ozz_span_pointer<_Ty>;
pub type ozz_span_const_iterator<_Ty> = ozz_span_const_pointer<_Ty>;
#[repr(C)]
pub struct ozz_memory_Allocator__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ozz_memory_Allocator {
    pub vtable_: *const ozz_memory_Allocator__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_StdAllocator {
    pub _address: u8,
}
pub type ozz_StdAllocator_value_type<_Ty> = _Ty;
pub type ozz_StdAllocator_pointer<_Ty> = *mut ozz_StdAllocator_value_type<_Ty>;
pub type ozz_StdAllocator_reference<_Ty> = *mut ozz_StdAllocator_value_type<_Ty>;
pub type ozz_StdAllocator_const_pointer<_Ty> = *const ozz_StdAllocator_value_type<_Ty>;
pub type ozz_StdAllocator_const_reference<_Ty> = *const ozz_StdAllocator_value_type<_Ty>;
pub type ozz_StdAllocator_size_type = usize;
pub type ozz_StdAllocator_difference_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_StdAllocator_rebind {
    pub _address: u8,
}
pub type ozz_vector = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_Deleter {
    pub _address: u8,
}
pub type ozz_unique_ptr = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_Animation {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_AnimationBuilder {
    pub iframe_interval: f32,
}
extern "C" {
    #[link_name = "\u{1}?Build@AnimationBuilder@offline@animation@ozz@@QEBA?AV?$unique_ptr@VAnimation@animation@ozz@@U?$Deleter@VAnimation@animation@ozz@@@3@@std@@AEBURawAnimation@234@@Z"]
    pub fn ozz_animation_offline_AnimationBuilder_Build(
        this: *const ozz_animation_offline_AnimationBuilder,
        _input: *const ozz_animation_offline_RawAnimation,
    ) -> u8;
}
impl ozz_animation_offline_AnimationBuilder {
    #[inline]
    pub unsafe fn Build(&self, _input: *const ozz_animation_offline_RawAnimation) -> u8 {
        ozz_animation_offline_AnimationBuilder_Build(self, _input)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_AnimationOptimizer {
    pub setting: ozz_animation_offline_AnimationOptimizer_Setting,
    pub joints_setting_override: ozz_animation_offline_AnimationOptimizer_JointsSetting,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_AnimationOptimizer_Setting {
    pub tolerance: f32,
    pub distance: f32,
}
pub type ozz_animation_offline_AnimationOptimizer_JointsSetting = [u64; 2usize];
extern "C" {
    #[link_name = "\u{1}??0AnimationOptimizer@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_AnimationOptimizer_AnimationOptimizer(
        this: *mut ozz_animation_offline_AnimationOptimizer,
    );
}
impl ozz_animation_offline_AnimationOptimizer {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_AnimationOptimizer_AnimationOptimizer(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_AdditiveAnimationBuilder {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}??0AdditiveAnimationBuilder@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_AdditiveAnimationBuilder_AdditiveAnimationBuilder(
        this: *mut ozz_animation_offline_AdditiveAnimationBuilder,
    );
}
impl ozz_animation_offline_AdditiveAnimationBuilder {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_AdditiveAnimationBuilder_AdditiveAnimationBuilder(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawAnimation {
    pub tracks: [u64; 3usize],
    pub duration: f32,
    pub name: ozz_string,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_RawAnimation_TranslationKey {
    pub time: f32,
    pub value: ozz_animation_offline_RawAnimation_TranslationKey_Value,
}
pub type ozz_animation_offline_RawAnimation_TranslationKey_Value = ozz_math_Float3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_RawAnimation_RotationKey {
    pub time: f32,
    pub value: ozz_math_Quaternion,
}
pub type ozz_animation_offline_RawAnimation_RotationKey_Value = ozz_math_Quaternion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_RawAnimation_ScaleKey {
    pub time: f32,
    pub value: ozz_math_Float3,
}
pub type ozz_animation_offline_RawAnimation_ScaleKey_Value = ozz_math_Float3;
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawAnimation_JointTrack {
    pub translations: ozz_animation_offline_RawAnimation_JointTrack_Translations,
    pub rotations: ozz_animation_offline_RawAnimation_JointTrack_Rotations,
    pub scales: ozz_animation_offline_RawAnimation_JointTrack_Scales,
}
pub type ozz_animation_offline_RawAnimation_JointTrack_Translations = [u64; 3usize];
pub type ozz_animation_offline_RawAnimation_JointTrack_Rotations = [u64; 3usize];
pub type ozz_animation_offline_RawAnimation_JointTrack_Scales = [u64; 3usize];
extern "C" {
    #[link_name = "\u{1}?Validate@JointTrack@RawAnimation@offline@animation@ozz@@QEBA_NM@Z"]
    pub fn ozz_animation_offline_RawAnimation_JointTrack_Validate(
        this: *const ozz_animation_offline_RawAnimation_JointTrack,
        _duration: f32,
    ) -> bool;
}
impl ozz_animation_offline_RawAnimation_JointTrack {
    #[inline]
    pub unsafe fn Validate(&self, _duration: f32) -> bool {
        ozz_animation_offline_RawAnimation_JointTrack_Validate(self, _duration)
    }
}
extern "C" {
    #[link_name = "\u{1}?Validate@RawAnimation@offline@animation@ozz@@QEBA_NXZ"]
    pub fn ozz_animation_offline_RawAnimation_Validate(
        this: *const ozz_animation_offline_RawAnimation,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?size@RawAnimation@offline@animation@ozz@@QEBA_KXZ"]
    pub fn ozz_animation_offline_RawAnimation_size(
        this: *const ozz_animation_offline_RawAnimation,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}??0RawAnimation@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_RawAnimation_RawAnimation(
        this: *mut ozz_animation_offline_RawAnimation,
    );
}
impl ozz_animation_offline_RawAnimation {
    #[inline]
    pub unsafe fn Validate(&self) -> bool {
        ozz_animation_offline_RawAnimation_Validate(self)
    }
    #[inline]
    pub unsafe fn size(&self) -> usize {
        ozz_animation_offline_RawAnimation_size(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_RawAnimation_RawAnimation(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_FixedRateSamplingTime {
    pub duration_: f32,
    pub period_: f32,
    pub num_keys_: usize,
}
extern "C" {
    #[link_name = "\u{1}??0FixedRateSamplingTime@offline@animation@ozz@@QEAA@MM@Z"]
    pub fn ozz_animation_offline_FixedRateSamplingTime_FixedRateSamplingTime(
        this: *mut ozz_animation_offline_FixedRateSamplingTime,
        _duration: f32,
        _frequency: f32,
    );
}
impl ozz_animation_offline_FixedRateSamplingTime {
    #[inline]
    pub unsafe fn new(_duration: f32, _frequency: f32) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_FixedRateSamplingTime_FixedRateSamplingTime(
            __bindgen_tmp.as_mut_ptr(),
            _duration,
            _frequency,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawSkeleton {
    pub roots: ozz_animation_offline_RawSkeleton_Joint_Children,
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawSkeleton_Joint {
    pub children: ozz_animation_offline_RawSkeleton_Joint_Children,
    pub name: ozz_string,
    pub transform: ozz_math_Transform,
}
pub type ozz_animation_offline_RawSkeleton_Joint_Children = [u64; 3usize];
extern "C" {
    #[link_name = "\u{1}?Validate@RawSkeleton@offline@animation@ozz@@QEBA_NXZ"]
    pub fn ozz_animation_offline_RawSkeleton_Validate(
        this: *const ozz_animation_offline_RawSkeleton,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?num_joints@RawSkeleton@offline@animation@ozz@@QEBAHXZ"]
    pub fn ozz_animation_offline_RawSkeleton_num_joints(
        this: *const ozz_animation_offline_RawSkeleton,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0RawSkeleton@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_RawSkeleton_RawSkeleton(
        this: *mut ozz_animation_offline_RawSkeleton,
    );
}
extern "C" {
    #[link_name = "\u{1}??1RawSkeleton@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_RawSkeleton_RawSkeleton_destructor(
        this: *mut ozz_animation_offline_RawSkeleton,
    );
}
impl ozz_animation_offline_RawSkeleton {
    #[inline]
    pub unsafe fn Validate(&self) -> bool {
        ozz_animation_offline_RawSkeleton_Validate(self)
    }
    #[inline]
    pub unsafe fn num_joints(&self) -> ::std::os::raw::c_int {
        ozz_animation_offline_RawSkeleton_num_joints(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_RawSkeleton_RawSkeleton(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ozz_animation_offline_RawSkeleton_RawSkeleton_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_RawTrackInterpolation {
    pub _address: u8,
}
pub const ozz_animation_offline_RawTrackInterpolation_Value_kStep:
    ozz_animation_offline_RawTrackInterpolation_Value = 0;
pub const ozz_animation_offline_RawTrackInterpolation_Value_kLinear:
    ozz_animation_offline_RawTrackInterpolation_Value = 1;
pub type ozz_animation_offline_RawTrackInterpolation_Value = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_RawTrackKeyframe<_ValueType> {
    pub interpolation: ozz_animation_offline_RawTrackInterpolation_Value,
    pub ratio: f32,
    pub value: ozz_animation_offline_RawTrackKeyframe_ValueType<_ValueType>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_ValueType>>,
}
pub type ozz_animation_offline_RawTrackKeyframe_ValueType<_ValueType> = _ValueType;
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_internal_RawTrack {
    pub keyframes: ozz_animation_offline_internal_RawTrack_Keyframes,
    pub name: ozz_string,
}
pub type ozz_animation_offline_internal_RawTrack_ValueType<_ValueType> = _ValueType;
pub type ozz_animation_offline_internal_RawTrack_Keyframe<_ValueType> =
    ozz_animation_offline_RawTrackKeyframe<
        ozz_animation_offline_internal_RawTrack_ValueType<_ValueType>,
    >;
pub type ozz_animation_offline_internal_RawTrack_Keyframes = ozz_vector;
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawFloatTrack {
    pub _base: ozz_animation_offline_internal_RawTrack,
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawFloat2Track {
    pub _base: ozz_animation_offline_internal_RawTrack,
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawFloat3Track {
    pub _base: ozz_animation_offline_internal_RawTrack,
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawFloat4Track {
    pub _base: ozz_animation_offline_internal_RawTrack,
}
#[repr(C)]
#[derive(Debug)]
pub struct ozz_animation_offline_RawQuaternionTrack {
    pub _base: ozz_animation_offline_internal_RawTrack,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_SkeletonBuilder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_TrackBuilder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_offline_TrackOptimizer {
    pub tolerance: f32,
}
extern "C" {
    #[link_name = "\u{1}??0TrackOptimizer@offline@animation@ozz@@QEAA@XZ"]
    pub fn ozz_animation_offline_TrackOptimizer_TrackOptimizer(
        this: *mut ozz_animation_offline_TrackOptimizer,
    );
}
impl ozz_animation_offline_TrackOptimizer {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ozz_animation_offline_TrackOptimizer_TrackOptimizer(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_Skeleton {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_FloatTrack {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_Float2Track {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_Float3Track {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_Float4Track {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_animation_QuaternionTrack {
    _unused: [u8; 0],
}
pub type ozz_map = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_str_less {
    pub _address: u8,
}
pub type ozz_cstring_map = u8;
pub type ozz_multimap = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_math_Float2 {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_math_Float3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_math_Float4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_math_Quaternion {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_math_Transform {
    pub translation: ozz_math_Float3,
    pub rotation: ozz_math_Quaternion,
    pub scale: ozz_math_Float3,
}
pub type ozz_string = [u64; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_io_OArchive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_io_IArchive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_io_Extern {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_io_internal_Version {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ozz_io_internal_Tag {
    pub _address: u8,
}
pub const ozz_io_internal_Tag_kTagLength: ozz_io_internal_Tag__bindgen_ty_1 = 0;
pub type ozz_io_internal_Tag__bindgen_ty_1 = ::std::os::raw::c_int;
