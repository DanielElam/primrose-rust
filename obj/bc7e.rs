#[allow(non_camel_case_types,dead_code,non_upper_case_globals,non_snake_case,improper_ctypes)]
pub mod bc7e {
/* automatically generated by rust-bindgen 0.69.5 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 32;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __intmax_t = ::std::os::raw::c_longlong;
pub type __uintmax_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = __int64_t;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __time64_t = __int64_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _anon0_ {
    pub m_max_mode13_partitions_to_try: u32,
    pub m_max_mode0_partitions_to_try: u32,
    pub m_max_mode2_partitions_to_try: u32,
    pub m_use_mode: [bool; 7usize],
    pub m_unused1: bool,
}
#[test]
fn bindgen_test_layout__anon0_() {
    const UNINIT: ::std::mem::MaybeUninit<_anon0_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_anon0_>(),
        20usize,
        concat!("Size of: ", stringify!(_anon0_))
    );
    assert_eq!(
        ::std::mem::align_of::<_anon0_>(),
        4usize,
        concat!("Alignment of ", stringify!(_anon0_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode13_partitions_to_try) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode13_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode0_partitions_to_try) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode0_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode2_partitions_to_try) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_max_mode2_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_use_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused1) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon0_),
            "::",
            stringify!(m_unused1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _anon1_ {
    pub m_max_mode7_partitions_to_try: u32,
    pub m_mode67_error_weight_mul: [u32; 4usize],
    pub m_use_mode4: bool,
    pub m_use_mode5: bool,
    pub m_use_mode6: bool,
    pub m_use_mode7: bool,
    pub m_use_mode4_rotation: bool,
    pub m_use_mode5_rotation: bool,
    pub m_unused2: bool,
    pub m_unused3: bool,
}
#[test]
fn bindgen_test_layout__anon1_() {
    const UNINIT: ::std::mem::MaybeUninit<_anon1_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_anon1_>(),
        28usize,
        concat!("Size of: ", stringify!(_anon1_))
    );
    assert_eq!(
        ::std::mem::align_of::<_anon1_>(),
        4usize,
        concat!("Alignment of ", stringify!(_anon1_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_max_mode7_partitions_to_try) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_max_mode7_partitions_to_try)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode67_error_weight_mul) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_mode67_error_weight_mul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode5) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode6) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode7) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode4_rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode4_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_use_mode5_rotation) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_use_mode5_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_unused2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused3) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_anon1_),
            "::",
            stringify!(m_unused3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bc7e_compress_block_params {
    pub m_max_partitions_mode: [u32; 8usize],
    pub m_weights: [u32; 4usize],
    pub m_uber_level: u32,
    pub m_refinement_passes: u32,
    pub m_mode4_rotation_mask: u32,
    pub m_mode4_index_mask: u32,
    pub m_mode5_rotation_mask: u32,
    pub m_uber1_mask: u32,
    pub m_perceptual: bool,
    pub m_pbit_search: bool,
    pub m_mode6_only: bool,
    pub m_unused0: bool,
    pub m_opaque_settings: _anon0_,
    pub m_alpha_settings: _anon1_,
}
#[test]
fn bindgen_test_layout_bc7e_compress_block_params() {
    const UNINIT: ::std::mem::MaybeUninit<bc7e_compress_block_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bc7e_compress_block_params>(),
        124usize,
        concat!("Size of: ", stringify!(bc7e_compress_block_params))
    );
    assert_eq!(
        ::std::mem::align_of::<bc7e_compress_block_params>(),
        4usize,
        concat!("Alignment of ", stringify!(bc7e_compress_block_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_max_partitions_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_max_partitions_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_weights) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_uber_level) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_uber_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_refinement_passes) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_refinement_passes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode4_rotation_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode4_rotation_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode4_index_mask) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode4_index_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode5_rotation_mask) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode5_rotation_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_uber1_mask) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_uber1_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_perceptual) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_perceptual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_pbit_search) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_pbit_search)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode6_only) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_mode6_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_unused0) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_unused0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_opaque_settings) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_opaque_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_alpha_settings) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bc7e_compress_block_params),
            "::",
            stringify!(m_alpha_settings)
        )
    );
}
}